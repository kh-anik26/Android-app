name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: # Allows manual triggering from GitHub Actions UI

jobs:
  build:
    runs-on: ubuntu-22.04 # Use a recent Ubuntu runner

    steps:
    # Step 1: Checkout the repository code
    - name: Checkout Code
      uses: actions/checkout@v4

    # Step 2: Basic check to confirm workflow is running
    - name: Verify Workflow Start
      run: echo "GitHub Actions workflow has successfully started!"

    # Step 3: Set up Python environment
    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    # Step 4: Set up JDK 17, essential for Android development
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin' # Recommended distribution

    # Step 5: Setup Android SDK using a dedicated action
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      env:
        # Ensure JAVA_HOME is correctly passed to the Android SDK setup action
        JAVA_HOME: ${{ env.JAVA_HOME_17_X64 }}

    # Step 6: Install specific Android SDK components
    - name: Install additional Android components
      run: |
        # Ensure JAVA_HOME is available for sdkmanager
        export JAVA_HOME=${{ env.JAVA_HOME_17_X64 }}
        
        echo "Installing Android SDK components..."
        # Install latest cmdline-tools, build-tools, platform, NDK, and platform-tools
        # cmdline-tools;latest is important for a working sdkmanager
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \
          "cmdline-tools;latest" \
          "build-tools;33.0.2" \
          "platforms;android-33" \
          "ndk;23.2.8568313" \
          "platform-tools"
        
        echo "Verifying AIDL installation and PATH after sdkmanager..."
        # Check if AIDL exists at its expected location
        ls -la "$ANDROID_HOME/build-tools/33.0.2/aidl" || echo "AIDL file not found at expected location!"
        # Check if AIDL is discoverable in the current PATH
        which aidl || echo "AIDL not found in current PATH after sdkmanager!"
        echo "Current PATH: $PATH"
      env:
        # Skip JDK version check for sdkmanager if needed
        SKIP_JDK_VERSION_CHECK: true

    # Step 7: Install system-level and Python dependencies for Buildozer
    - name: Install dependencies
      run: |
        echo "Updating apt and installing system dependencies..."
        sudo apt-get update
        sudo apt-get install -y git zip unzip python3-pip autoconf libtool pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev cmake libffi-dev libssl-dev build-essential libltdl-dev
        
        echo "Upgrading pip and installing Python dependencies..."
        pip3 install --upgrade pip setuptools wheel
        pip3 install buildozer cython==0.29.33 # Pin Cython version for compatibility

    # Step 8: Cache Buildozer's global directory to speed up future runs
    - name: Cache Buildozer global directory
      uses: actions/cache@v4
      with:
        path: ~/.buildozer # Buildozer's global cache
        key: ${{ runner.os }}-buildozer-${{ hashFiles('**/buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-

    # Step 9: Cache Buildozer's project-specific cache directory
    - name: Cache Buildozer project cache directory
      uses: actions/cache@v4
      with:
        path: .buildozer # Project-specific buildozer cache
        key: ${{ runner.os }}-buildozer-cache-${{ hashFiles('**/buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-cache-

    # Step 10: Build the Android APK using Buildozer
    - name: Build with Buildozer
      run: |
        echo "Starting Buildozer build process..."
        # Export necessary environment variables for Buildozer
        export JAVA_HOME=${{ env.JAVA_HOME_17_X64 }}
        export ANDROID_SDK_ROOT=$ANDROID_HOME
        export ANDROID_NDK_HOME=$ANDROID_HOME/ndk/23.2.8568313
        
        # IMPORTANT: Prepend Android build tools and platform tools to PATH
        # This ensures AIDL and other essential Android tools are found by Buildozer.
        # Prepending gives them priority in the PATH.
        export PATH=$ANDROID_HOME/build-tools/33.0.2:$ANDROID_HOME/platform-tools:$PATH
        
        echo "PATH before buildozer execution: $PATH"
        echo "Verifying AIDL just before buildozer command:"
        which aidl || echo "AIDL still not found in PATH!"
        ls -la "$ANDROID_HOME/build-tools/33.0.2/aidl" || echo "AIDL file not found at expected location!"
        
        # Accept any remaining Android SDK licenses
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
        
        # Execute Buildozer to create the debug APK
        # -v for verbose output, helpful for debugging
        buildozer android debug -v
      env:
        # Ensure this environment variable is set for the buildozer command
        SKIP_JDK_VERSION_CHECK: true

    # Step 11: Upload the generated APK as a workflow artifact
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: android-apk # Name of the artifact
        path: bin/*.apk   # Path to the generated APK file(s)

    # Step 12: Create a GitHub Release and attach the APK (optional, but good for distribution)
    - name: Create Release
      # Only run this step if pushing to main or master branch
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ github.run_number }} # Dynamic tag name based on run number
        name: Release v${{ github.run_number }}
        files: bin/*.apk # Attach the APK as a release asset
        generate_release_notes: true # Automatically generate release notes
      env:
        # GITHUB_TOKEN is automatically provided by GitHub Actions for authentication
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
